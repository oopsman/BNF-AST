/**
 * Created by ghy on 2019/4/11.
 */
const ASTParse = require('./ASTParse');
var RuleParser = require('./RuleParser');

const bnf = `
<程序>     ::= <定义 块> <语句 块>

<定义 块>  ::= <定义> | <定义> <定义 块>
<定义>     ::= 定义  <变量 组> ;
<变量 组>  ::= <变量> , <变量 组> | <变量>

<语句 块>  ::= <语句> <语句 块> | <语句>
<语句>     ::= <赋值>|<判断>|<循环>|<输出>|<输入>

<赋值>     ::= <变量> 等于 <表达式> ;
<输入>     ::= 输入 <变量 组> ;
<输出>     ::= 输出 <变量 组> ;

<判断>     ::= 如果 <条件> { <语句 块> } ;
<循环>     ::= 循环 <条件> { <语句 块> } ;
<条件>	   ::= <比较> | ! <条件> | [ <条件> && <条件> ] | [ <条件> or <条件> ]

<比较>     ::= ( <值> <比较 符> <值> )
<比较 符>  ::= != | == | < | > | <= | >=
<表达式>   ::= <计算> | <计算> 加 <表达式> | <计算> 减 <表达式>
<计算>     ::= <值> | <值> 乘 <计算> | <值> 除 <计算>

<值>       ::= <整形> | <变量> | ( <表达式> )|<字符串>
<变量>     ::= <字符><变量> | <字符><整形> | <字符>
<字符>     ::= A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z
<整形>     ::= <数字><整形> | <数字>
<数字>     ::= 0|1|2|3|4|5|6|7|8|9
<字符串>   ::= "<变量 组>" |  '<变量 组>'
`

const ruleMap = RuleParser.parse(bnf);
console.log(JSON.stringify(ruleMap));